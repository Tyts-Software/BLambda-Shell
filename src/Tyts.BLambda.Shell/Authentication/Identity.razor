@page "/authentication/identity"

<h1>Identity name: @user?.Identity?.Name</h1>

<h2>Identity claims</h2>
@foreach (var claim in user?.Claims ?? Array.Empty<Claim>())
{
    <p class="claim">@(claim.Type): @claim.Value</p>
}

@*<h2>Id token for the user</h2>
@foreach (var claim in GetIdTokenClaims())
{
    <p>@(claim.Key): @claim.Value.ToString()</p>
}*@

@if (accessToken != null)
{
    <h2>Access token</h2>
    <p id="access-token">@accessToken.Value</p>

    <h2>Access token claims</h2>
    @foreach (var claim in GetAccessTokenClaims())
    {
        <p>@(claim.Key): @claim.Value.ToString()</p>
    }

    <h2>Access token expires</h2>
    <p id="access-token-expires">at @accessToken.Expires.ToLocalTime()</p>
    <p>Current time: <span id="current-time">@DateTimeOffset.Now</span></p>

    <h2>Access token granted scopes (as reported by the API)</h2>
    <ul>
        @foreach (var scope in accessToken.GrantedScopes)
        {
            <li>@scope</li>
        }
    </ul>
}

@using System.Text.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject IAccessTokenProvider AuthorizationService
@inject NavigationManager Navigation
@inject CognitoHelper CognitoHelper

@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationState { get; set; } = default!;
    ClaimsPrincipal user { get; set; } = default!;
    AccessToken accessToken = default!;

    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationState).User;

        var accessTokenResult = await AuthorizationService.RequestAccessToken(new AccessTokenRequestOptions
        {
            //Scopes = new[] { "SecondAPI" }
        });

        if (!accessTokenResult.TryGetToken(out accessToken))
        {
            Navigation.NavigateToLogin(accessTokenResult.InteractiveRequestUrl, accessTokenResult.InteractionOptions);
            return;
        }
    }

    protected IDictionary<string, object> GetAccessTokenClaims()
    {
        // header.payload.signature
        var payload = accessToken.Value.Split(".")[1];
        var base64Payload = payload
            .Replace('-', '+')
            .Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');

        return JsonSerializer.Deserialize<IDictionary<string, object>>(Convert.FromBase64String(base64Payload!)) ?? new Dictionary<string, object>();
    }


    protected IDictionary<string, object> GetIdTokenClaims()
    {
        return new Dictionary<string, object>();
    }
}