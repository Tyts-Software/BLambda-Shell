@page "/authentication/{action}"

<RemoteAuthenticatorView Action="@Action">
    <LoggingIn>
        You are about to be redirected to Identity Provider authority...
    </LoggingIn>
    <LogInFailed>
        Login failed
    </LogInFailed>
    <LogOutSucceeded>
        
    </LogOutSucceeded>
</RemoteAuthenticatorView>

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject CognitoHelper CognitoHelper
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

@code {
    [Parameter]
    public string Action { get; set; } = default!;

    [CascadingParameter] Task<AuthenticationState> authState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn, Action))
        {
        }
        else if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogInCallback, Action))
        {
        }
        else if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogOut, Action))
        {
            //as for 'X-Frame-Options' set to 'deny' in AWS it seems Logout does not work properly:
            //tokens are not revoked thus 
            //just after logout it is possible to re-login with previous token (without credentials)
            var user = (await authState).User;
            if (user.Identity?.IsAuthenticated ?? false)
            {
                await CognitoHelper.RevokeTokens();
                CognitoHelper.Logout();
            }            
        }
        else if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogOutCallback, Action))
        {
        }
        else if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogOutSucceeded, Action))
        {
            
        }
    }
}