
<aside class="nav-menu @collapsed_css">
    <FlexBox Class="expander" HorizontalGap="4">
        <NavMenuExpander />                
        <FluentSearch class="search" type="search" Placeholder="Search in menu.." />
        @*Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @onchange="HandleClear"*@
    </FlexBox>
    <div class="thin-scrollbar">
    <FluentAccordion>

        <FluentAccordionItem Expanded="true" Heading="Hello World!">
            <FluentIcon Slot="start" Value="@(new Icons.Regular.Size24.Globe())" />

            @foreach (var link in links)
            {
                <FluentAnchor @key=link Href="@link.Href" Appearance="@link.Appearance">
                    @link.Text
                    <FluentIcon Slot="start" Value="@link.Icon" />
                </FluentAnchor>
            }



        </FluentAccordionItem>

        <FluentAccordionItem Expanded="true" Heading="Auth Roles">
            <IconWithBadge BadgeHidden="@expanded" Slot="start" Value="@(new Icons.Regular.Size24.CalendarPerson())" />
            <FluentBadge Appearance="Appearance.Accent" slot="end"
                         OnClick="@(()=> Logger.LogInformation("Badge clicked"))" hidden="@(!expanded)">New</FluentBadge>


            @if (this.IsDebug())
            {
                <FluentButton OnClick="@(() => Console.Write("ATTENTION: Debugging is here"))" Appearance="Appearance.Stealth">
                    Debug Only
                    <FluentIcon Slot="start" Value="@(new Icons.Regular.Size24.Bug())" />
                </FluentButton>
            }

            <FluentAnchor Href="" Appearance="Appearance.Stealth">
                Go to Unauthorized
                <FluentIcon Slot="start" Value="@(new Icons.Regular.Size24.CalendarError())" />
            </FluentAnchor>

            <AuthorizeView Roles="@Roles.ADMIN" Context="innerContext">
                <FluentAnchor Href="" Appearance="Appearance.Stealth">
                    Admin Menu Item
                    <FluentIcon Slot="start" Value="@(new Icons.Regular.Size24.CalendarCheckmark())" />
                    <FluentBadge slot="end" Appearance="Appearance.Neutral" hidden="@(!expanded)">
                        @Roles.ADMIN
                    </FluentBadge>
                </FluentAnchor>
            </AuthorizeView>

            <AuthorizeView Roles="@Roles.EDITOR">
                <FluentAnchor Href="" Appearance="Appearance.Stealth">
                    Editor Menu Item
                    <FluentIcon Slot="start" Value="@(new Icons.Regular.Size24.CalendarEdit())" />
                    <FluentBadge slot="end" Appearance="Appearance.Neutral" hidden="@(!expanded)">
                        @Roles.EDITOR
                    </FluentBadge>
                </FluentAnchor>
            </AuthorizeView>

            <AuthorizeView Roles="NOT_IN_ROLE, OR_ANOTHER_ROLE" Context="innerContext">
                <FluentAnchor Href="" Appearance="Appearance.Stealth">
                    SHOULD be hidden for user: @innerContext.User
                </FluentAnchor>
                <FluentDivider />
            </AuthorizeView>


        </FluentAccordionItem>

        <Slot TSlot=Slots.NavMenuSlot />

    </FluentAccordion>
    </div>
</aside>

@implements IDisposable

@inject NavigationManager NavigationManager
@inject INavMenuService NavMenuService
@inject ILogger<NavMenu> Logger
@code {


    class Link
    {
        public string? Text { get; set; }
        public string? Href { get; set; }
        public Icon? Icon { get; set; }
        public Appearance Appearance => (Href?.Equals(target, StringComparison.InvariantCultureIgnoreCase) ?? false)
            ? Appearance.Stealth
            : Appearance.Lightweight;
    }


    private static string target = string.Empty;

    private readonly List<Link> links = new()
    {
       new(){ Text = "Home", Href = string.Empty, Icon = new Icons.Regular.Size24.Home() },
       new(){ Text = "Counter", Href = "/demo/counter", Icon = new Icons.Regular.Size24.AddSubtractCircle() },
       new(){ Text = "Fetch Data", Href = "/demo/fetchdata", Icon = new Icons.Regular.Size24.Table() }
    };

    string collapsed_css => NavMenuService.IsExpanded ? string.Empty : "collapsed";
    bool expanded => NavMenuService.IsExpanded;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += NavMeny_LocationChanged;
        NavMenuService.Expanded += NavMenu_Toggled;
    }

    async Task NavMenu_Toggled(bool open)
    {
        await InvokeAsync(StateHasChanged);
    }

    void NavMeny_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Uri uri = new Uri(e.Location);
        if (uri.Segments.Count() > 1)
            target = uri.Segments[1];
        else
            target = string.Empty;

        //StateHasChanged();
    }


    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= NavMeny_LocationChanged;
        NavMenuService.Expanded -= NavMenu_Toggled;
    }
}
