@implements IDisposable

@inject NavigationManager navigationManager

<aside class="nav-menu thin-scrollbar">
    <FluentSearch class="search" type="search" Placeholder="Search in menu.." />
    @*Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @onchange="HandleClear"*@

    <FluentAccordion>

        <FluentAccordionItem Expanded="true" Heading="Internal">
            <FluentIcon Slot="start" Value="@(new Icons.Regular.Size24.Globe())" />
            <div slot="end">
                <button>1</button>
            </div>

            @foreach (var link in links)
            {
                <FluentAnchor @key=link Href="@link.Href" Appearance="@link.Appearance">
                    @link.Text
                    <FluentIcon Slot="start" Value="@link.Icon" />
                </FluentAnchor>
            }
        </FluentAccordionItem>

        <Slot TSlot=Slots.NavMenuSlot />


    </FluentAccordion>

</aside>




@code {

    class Link
    {
        public string? Text { get; set; }
        public string? Href { get; set; }
        public Icon? Icon { get; set; }
        public Appearance Appearance => (Href?.Equals(target, StringComparison.InvariantCultureIgnoreCase) ?? false)
            ? Appearance.Stealth
            : Appearance.Lightweight;
    }


    private static string target = string.Empty;

    private readonly List<Link> links = new()
    {
       new(){ Text = "Home", Href = string.Empty, Icon = new Icons.Regular.Size24.Home() },
       new(){ Text = "Counter", Href = "/demo/counter", Icon = new Icons.Regular.Size24.AddSubtractCircle() },
       new(){ Text = "Fetch Data", Href = "/demo/fetchdata", Icon = new Icons.Regular.Size24.Table() }
    };

    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += NavMeny_LocationChanged;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }


    Appearance SetAppearance(string location) => 
    (location.Equals(target, StringComparison.InvariantCultureIgnoreCase)) 
            ? Appearance.Stealth 
            : Appearance.Lightweight;


    void NavMeny_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Uri uri = new Uri(e.Location);
        if (uri.Segments.Count() > 1)
            target = uri.Segments[1];
        else
            target = string.Empty;

        //StateHasChanged();
    }


    void IDisposable.Dispose()
    {
        navigationManager.LocationChanged -= NavMeny_LocationChanged;
    }
}
