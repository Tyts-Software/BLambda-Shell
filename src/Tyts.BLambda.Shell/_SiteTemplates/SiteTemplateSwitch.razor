@namespace Tyts.BLambda.Blazor.Theme
@implements IDisposable


<FluentSwitch Value="@darkMode" Disabled="@disabled" @* ValueChanged="@OnDarkModeChanged" *@ title="Switch mode">
    <span class="label">Mode</span>
    <span slot="checked-message">dark</span>
    <span slot="unchecked-message">light</span>
</FluentSwitch>


@code {

    bool darkMode;
    bool disabled;
    
    [Parameter]
    public bool? FixDarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> DarkModeChanged { get; set; }
   
    // protected override void OnInitialized()
    // {
    //     // if exists on init
    //     // override OS and persisted preferencies & make it fixed
    //     if (FixDarkMode != null && Theme.Current.DarkMode != FixDarkMode)
    //         {
    //         Theme.ToggleDarkMode(FixDarkMode);
    //     disabled = true;
    //     }

    //     darkMode = Theme.Current.DarkMode;

    //     Theme.ThemeChanged += OnDarkModeChangedOutside;


    //     //await AccentBaseColor.SetValueFor(ref2!.Element, "#107C41".ToSwatch());
    //     //await NeutralBaseColor.SetValueFor(ref2!.Element, "#107C41".ToSwatch());
    // }

    // async Task OnDarkModeChanged()
    //     {
    //     darkMode = await Theme.ToggleDarkMode();

    //     await DarkModeChanged.InvokeAsync(darkMode);
    // }

    // async Task OnDarkModeChangedOutside(SiteTemplateDescriptor cur, SiteTemplateDescriptor old)
    //     {
    //     await InvokeAsync(() =>
    //         {
    //         if (darkMode != cur.DarkMode)
    //             {
    //             darkMode = cur.DarkMode;
    //             StateHasChanged();
    //     }
    // });
    // }

    void IDisposable.Dispose()
    {
    //    Theme.ThemeChanged -= OnDarkModeChangedOutside;
    }
}

