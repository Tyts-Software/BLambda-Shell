
<FluentDesignTheme @bind-Mode="@Mode"
                   OfficeColor="@OfficeColor"
                   OfficeColorChanged="@(e => { OfficeColor = e ?? OfficeColor.Default; StateHasChanged(); })"
                   OnLoaded="@OnLoaded"
                   OnLuminanceChanged="@OnLuminanceChanged"
                   StorageName="theme" />



    <h5>Color settings</h5>
    <FluentSelect Label="Theme"
                  Items="@(Enum.GetValues<DesignThemeModes>())"
                  @bind-SelectedOption="@Mode" />

    <FluentSelect Label="Color"
                  Items="@(Enum.GetValues<OfficeColor>())"
                  Height="200px"
                  @bind-SelectedOption="@OfficeColor">
        <OptionTemplate>
            <FluentStack>
                <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                            Color="Color.Custom"
                            CustomColor="@context.ToAttributeValue()" />
                <FluentLabel>@context</FluentLabel>
            </FluentStack>
        </OptionTemplate>
    </FluentSelect>


       
@inject GlobalState GlobalDesign;
@inject ILogger<ThemeSettings> Logger;

    @code {
    public DesignThemeModes Mode { get; set; }

    public OfficeColor OfficeColor { get; set; }

    void OnLoaded(LoadedEventArgs e)
    {
        Logger.LogInformation($"Loaded: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    void OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        Logger.LogInformation($"Changed: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }
}
