@page "/weather/forecast"

@inject HttpClient Http

@code {
    public static readonly string PageUrl = "/weather/forecast";

    IQueryable<WeatherForecast>? forecasts;


    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    string nameFilter = string.Empty;

    //GridSort<WeatherForecast> rankSort = GridSort<Country>
    //    .ByDescending(x => x.Medals.Gold)
    //    .ThenDescending(x => x.Medals.Silver)
    //    .ThenDescending(x => x.Medals.Bronze);

    IQueryable<WeatherForecast>? FilteredItems => forecasts?.Where(x => x.City != null && x.City.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));


    protected override async Task OnInitializedAsync()
    {
        forecasts = (await Http.GetFromJsonAsync<WeatherForecast[]>("_content/Tyts.BLambda.Shell.Modules.HelloWorld/sample-data/weather.json"))?.AsQueryable();
    }

    public class WeatherForecast
    {
        public string? CountryCode { get; set; }

        public string? City { get; set; }

        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }


    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear(ChangeEventArgs args)
    {
        if (args is not null && string.IsNullOrWhiteSpace(args.Value?.ToString()))
        {
            nameFilter = string.Empty;
        }
    }
}

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Items="@forecasts" ResizableColumns=true GridTemplateColumns="0.3fr 0.2fr 0.2fr 1fr" style="height: 405px; overflow:auto;">
        @*<TemplateColumn Title="Rank" SortBy="@rankSort" Align="Align.Center" IsDefaultSort="SortDirection.Ascending">
            <img class="flag" src="_content/FluentUI.Demo.Shared/flags/@(context.CountryCode).svg" />
        </TemplateColumn>*@

        @*<PropertyColumn Property="@(c => c.Name)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @onchange="HandleClear" Placeholder="Country name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>*@

        <PropertyColumn Property="@(c => c.Date.ToShortDateString())" Sortable="true" Align="Align.End" />
        <PropertyColumn Property="@(c => c.TemperatureC)" Sortable="true" Align="Align.End" />
        <PropertyColumn Property="@(c => c.TemperatureF)" Sortable="true" Align="Align.End" />
        <PropertyColumn Property="@(c => c.Summary)" Sortable="true" Align="Align.Start" />
    </FluentDataGrid>
}